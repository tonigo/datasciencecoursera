makeVector <- function(x = numeric()){}
makeVector <- function(x = numeric()){
m <- NULL
set <- function(y) {
x <<- Y
m <<- NULL
}
get <- function() x
setmean <- function(mean) m <<- mean
list(set = set, get = get,)
}
quit()
q()
a <- makeCacheMatrix()
## Store a function in a variable a
a$set(matrix 1:4,2,2)
## stores a matrix
makeCacheMatrix <- function(x = matrix()){
m <- NULL
set <- function(y){
x <<- y
m <<- NULL
}
get <- function() x
setmatrix <- function(solve) m <<- solve
getmatrix <- function() m
list (set = set, get = get,
setmatrix = setmatrix,
getmatrix = getmatrix)
}
cacheSolve <- function(x=matrix(), ...){
m <- x$getmatrix()
if (!is.null(m)){
message("getting cached data")
return(m)
}
matrix <- x$get()
m <- solve(matrix, ...)
x$setmatrix(m)
m
}
cacheSolve(a)
makeCacheMatrix <- function(x = matrix()){
m <- NULL
set <- function(y){
x <<- y
m <<- NULL
}
get <- function() x
setmatrix <- function(solve) m <<- solve
getmatrix <- function() m
list (set = set, get = get,
setmatrix = setmatrix,
getmatrix = getmatrix)
}
cacheSolve <- function(x=matrix(), ...){
m <- x$getmatrix()
if (!is.null(m)){
message("getting cached data")
return(m)
}
matrix <- x$get()
m <- solve(matrix, ...)
x$setmatrix(m)
m
}
a <- makeCacheMatrix()
a$set(matrix(1:4,2,2))
cacheSolve(a)
makeCacheMatrix <- function(x = matrix()){
m <- NULL
set <- function(y){
x <<- y
m <<- NULL
}
get <- function() x
setmatrix <- function(solve) m <<- solve
getmatrix <- function() m
list (set = set, get = get,
setmatrix = setmatrix,
getmatrix = getmatrix)
}
cacheSolve <- function(x=matrix(), ...){
m <- x$getmatrix()
if (!is.null(m)){
message("getting cached data")
return(m)
}
matrix <- x$get()
m <- solve(matrix, ...)
x$setmatrix(m)
m
}
a <- makeCacheMatrix()
## Store a function in a variable a
a$set(matrix 1:4,2,2)
## stores a matrix
makeCacheMatrix <- function(x = matrix()){
m <- NULL
set <- function(y){
x <<- y
m <<- NULL
}
get <- function() x
setmatrix <- function(solve) m <<- solve
getmatrix <- function() m
list (set = set, get = get,
setmatrix = setmatrix,
getmatrix = getmatrix)
}
cacheSolve <- function(x=matrix(), ...){
m <- x$getmatrix()
if (!is.null(m)){
message("getting cached data")
return(m)
}
matrix <- x$get()
m <- solve(matrix, ...)
x$setmatrix(m)
m
}
a <- makeCacheMatrix()
a$set(matrix(1:4,2,2))
cachesolve(a)
cacheSolve(s)
cacheSolve(a)
makeCacheMatrix <- function(x = matrix()){
m <- NULL
set <- function(y){
x <<- y
m <<- NULL
}
get <- function() x
setmatrix <- function(solve) m <<- solve
getmatrix <- function() m
list (set = set, get = get,
setmatrix = setmatrix,
getmatrix = getmatrix)
}
cacheSolve <- function(x=matrix(), ...){
m <- x$getmatrix()
if (!is.null(m)){
message("getting cached data")
return(m)
}
matrix <- x$get()
m <- solve(matrix, ...)
x$setmatrix(m)
m
}
a <- makeCacheMatrix()
## Store a function in a variable a
a$set(matrix(1:4,2,2))
## stores a matrix
cacheSolve(a)
## provides result
makeCacheMatrix <- function(x = matrix()){
m <- NULL
set <- function(y){
x <<- y
m <<- NULL
}
##creates the special matrix
get <- function() x
setmatrix <- function(solve) m <<- solve
getmatrix <- function() m
list (set = set, get = get,
setmatrix = setmatrix,
getmatrix = getmatrix)
}
cacheSolve <- function(x=matrix(), ...){
m <- x$getmatrix()
if (!is.null(m)){
message("getting cached data")
return(m)
}
matrix <- x$get()
m <- solve(matrix, ...)
x$setmatrix(m)
m
}
##computes the inverse of the special matrix
a <- makeCacheMatrix()
## Store a function in a variable a
a$set(matrix(1:4,2,2))
## stores a matrix
cacheSolve(a)
## provides result
quit()
q()
